spring:
  application:
    name: personal-data-encryption

  # 데이터베이스 설정
  datasource:
    url: jdbc:postgresql://localhost:5432/encryption_db
    username: postgres
    password: postgrespassword
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 10
      minimum-idle: 5
      idle-timeout: 30000
      pool-name: EncryptionHikariPool

  # JPA 설정
  jpa:
    hibernate:
      ddl-auto: update # 개발 환경에서는 update, 운영 환경에서는 validate 권장
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        show_sql: true
        use_sql_comments: true
        default_batch_fetch_size: 100
    open-in-view: false

  # ElasticSearch 설정
  elasticsearch:
    uris: http://localhost:9200
    connection-timeout: 5s
    socket-timeout: 30s

# JWT 설정
jwt:
  # 서명에 사용할 비밀키 (실제 환경에서는 환경 변수로 제공)
  secret: ${JWT_SECRET:QXV0aGVudGljYXRpb25TZWNyZXRLZXlGb3JKV1RUb2tlbkdlbmVyYXRpb25BbmRWYWxpZGF0aW9u}

  # 액세스 토큰 만료 시간 (밀리초): 30분
  access-token-expiration: 1800000

  # 리프레시 토큰 만료 시간 (밀리초): 14일
  refresh-token-expiration: 1209600000

  # 토큰 발행자
  issuer: personal-data-encryption-system

  # 쿠키 설정
  cookie:
    # 쿠키 도메인 (운영 환경에서는 실제 도메인으로 변경)
    domain: localhost

    # 보안 쿠키 설정 (HTTPS에서만 전송, 개발 환경에서는 false로 설정 가능)
    secure: false

    # 토큰 소스 우선순위 (cookie-first 또는 header-first)
    # cookie-first: 쿠키에서 먼저 토큰을 찾고, 없으면 헤더에서 찾음
    # header-first: 헤더에서 먼저 토큰을 찾고, 없으면 쿠키에서 찾음
    token-source-priority: cookie-first

# 암호화 설정
encryption:
  key: ${ENCRYPTION_MASTER_KEY:MTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTI=} # 실제 환경에서는 환경 변수로 제공
  key-rotation-period-days: 90
  algorithm: AES/GCM/NoPadding

# 로깅 설정
logging:
  level:
    root: INFO
    com.personaldata.encryption: DEBUG
    org.hibernate.SQL: DEBUG
    org.springframework.data.elasticsearch.client.WIRE: ERROR

# 서버 설정
server:
  port: 8080
#  servlet:
#    context-path: /

# 관리자 API 설정
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: when_authorized

# Swagger/OpenAPI 설정
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    operationsSorter: method
  packages-to-scan: com.personaldata.encryption